/*==============================================================================
Feel free to add your own header, but please keep the following:
 ___  _   _    _
/   || | | |  | |
\__  | | | |  | |  __
/    |/  |/_) |/  /  \_/\/
\___/|__/| \_/|__/\__/  /\_/
              |\
              |/
Concrete v2.0.3
https://github.com/Elkfox/Concrete
Copyright (c) 2017 Elkfox Co Pty Ltd
https://elkfox.com
MIT License
==============================================================================*/

window.concrete = window.concrete || {};

// perhaps turn into an assign in function?
concrete.strings = {
  soldOut: "{{ 'product.sold_out' | t }}",
  addToCart: "{{ 'product.add_to_cart' | t }}",
  unavailable: "{{ 'product.unavailable' | t }}"
};

concrete.urlParams = {};

/*================ Concrete ================*/
// =require concrete/cache.js
// replace urlparameter
concrete.replaceUrlParam = function(url, paramName, paramValue){
    if(paramValue == null)
        paramValue = '';
    var pattern = new RegExp('\\b('+paramName+'=).*?(&|$)')
    if(url.search(pattern)>=0){
        return url.replace(pattern,'$1' + paramValue + '$2');
    }
    return url + (url.indexOf('?')>0 ? '&' : '?') + paramName + '=' + paramValue
}

concrete.getUrlParameters = function(){
  parameters = {};
  if (location.search.length) {
    for (var value, i = 0, pairs = location.search.substr(1).split('&'); i < pairs.length; i++) {
      value = pairs[i].split('=');
      if (value.length > 1) {
        parameters[decodeURIComponent(value[0])] = decodeURIComponent(value[1]);
      }
    }
  }
  return parameters;
}

concrete.pushNewUrl = function(url) {
  window.history.replaceState({path: url}, '', url);
}

// Collection template sorting
concrete.getUrlParameterByName = function(parameter) {
  var url = decodeURIComponent(window.location.search.substring(1)),
      urlVariables = url.split('&'),
      parameterName;

  for (i = 0; i < urlVariables.length; i++) {
    parameterName = urlVariables[i].split('=');
    if (parameterName[0] === parameter) {
      return parameterName[1] === undefined ? true : parameterName[1];
    }
  }
};

concrete.urlParams = concrete.getUrlParameters();

// Javascript helpers for users with visual impairment

concrete.a11y = {

  // For use after scrolling using an anchor link, focus will change to the correct location so that hitting tab does not scroll the user back up.
  pageLinkFocus: function($element) {

    $element.first()
      .attr('tabIndex', '-1')
      .focus()
      .data('a11y-focus')
      .one('blur', callback);

    function callback() {
      $element.first()
        .removeData('a11y-focus')
        .removeAttr('tabindex');
    }
  },
  // Detect if the user has visited an anchored url if so update the focus to the correct location
  focusHash: function() {
    var hash = window.location.hash;

    // is there a hash in the url? is it an element on the page?
    if (hash && document.getElementById(hash.slice(1))) {
      this.pageLinkFocus($(hash));
    }
  },
  // On click of an anchor link fire the page focus function
  bindInPageLinks: function() {
    $('a[href*=#]').on('click', function(evt) {
      this.pageLinkFocus($(evt.currentTarget.hash));
    }.bind(this));
  },
  // Traps the focus within a specific container for example a popup that is open
  trapFocus: function(options) {
    var eventName = options.namespace
      ? 'focusin.' + options.namespace
      : 'focusin';

    if (!options.$elementToFocus) {
      options.$elementToFocus = options.$container;
    }

    options.$container.attr('tabindex', '-1');
    options.$elementToFocus.focus();

    $(document).on(eventName, function(evt) {
      if (options.$container[0] !== evt.target && !options.$container.has(evt.target).length) {
        options.$container.focus();
      }
    });
  },

  // Stop trapping of focus
  removeTrapFocus: function(options) {
    var eventName = options.namespace
      ? 'focusin.' + options.namespace
      : 'focusin';

    if (options.$container && options.$container.length) {
      options.$container.removeAttr('tabindex');
    }

    $(document).off(eventName);
  }

}

concrete.Currency = (function() {

  var moneyFormat = {% raw %}'${{amount}}'{% endraw %};

  function formatMoney(cents, format) {
    if (typeof cents === 'string') {
      cents = cents.replace('.', '');
    }
    var value = '',
    placeholderRegex = /\{\{\s*(\w+)\s*\}\}/,
    formatString = (format || moneyFormat);
    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = precision || 2;
      thousands = thousands || ',';
      decimal = decimal || '.';

      if (isNaN(number) || number == null) {
        return 0;
      }

      number = (number/100.0).toFixed(precision);

      var parts = number.split('.'),
      dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
      cents = parts[1] ? (decimal + parts[1]) : '';

      return dollars + cents;

    }

    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 1, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }
    return formatString.replace(placeholderRegex, value);
}

  return {formatMoney: formatMoney};

})();

/**
 *
 * From Shopifys "Slate" theme.
 * With a few modifications here and there.
 *
 */
concrete.Sections = function Sections() {
  this.constructors = {};
  this.instances = [];

  $(document)
  .on('shopify:section:load', this._onSectionLoad.bind(this))
  .on('shopify:section:unload', this._onSectionUnload.bind(this))
  .on('shopify:section:select', this._onSelect.bind(this))
  .on('shopify:section:deselect', this._onDeselect.bind(this))
  .on('shopify:section:reorder', this._onSectionReorder.bind(this))
  .on('shopify:block:select', this._onBlockSelect.bind(this))
  .on('shopify:block:deslect', this._onBlockDeselect.bind(this));
};

concrete.Sections.prototype = _.assign({}, concrete.Sections.prototype, {
  _createInstance: function(container, constructor) {
    var $container = $(container);
    var id = $container.attr('data-section-id');
    var type = $container.attr('data-section-type');

    constructor = constructor || this.constructors[type];

    if (typeof(constructor) === 'undefined') {
      return;
    }

    var instance = _.assign(new constructor(container), {
      id: id,
      type: type,
      container: container
    });

    this.instances.push(instance);
  },

  _onSectionLoad: function(evt) {
    var container = $('[data-section-type]', evt.target)[0];
    if (container) {
      this._createInstance(container);
    }
  },

  _onSectionUnload: function(evt) {
    this.instances = this.instances.filter( function(instance) {
      var isEventInstance = (instance.id === evt.detail.sectionId);
      if (isEventInstance) {
        if (typeof(instance.onUnload) === 'function') {
          instance.onUnload(evt);
        }
      }

      return !isEventInstance;
    });
  },

  _onSelect: function(evt) {
    var instance = this.instances.filter(function(instance) {
      return instance.id === evt.detail.sectionId;
    })[0];

    if (typeof(instance) !== 'undefined' && typeof(instance.onSelect) === 'function') {
      instance.onSelect(evt);
    }
  },

  _onDeselect: function(evt) {
    var instance = this.instances.filter(function(instance) {
      return instance.id === evt.detail.sectionId;
    })[0];

    if (typeof(instance) !== 'undefined' && typeof(instance.onDeselect) === 'function') {
      instance.onDeselect(evt);
    }
  },

_onSectionReorder: function(evt) {
    var instance = slate.utils.findInstance(this.instances, 'id', evt.detail.sectionId);

    if (instance && typeof instance.onSectionReorder === 'function') {
      instance.onSectionReorder(evt);
    }
  },

  _onBlockSelect: function(evt) {
    var instance = this.instances.filter(function(instance) {
      return instance.id === evt.detail.sectionId;
    });

    if (typeof(instance) !== 'undefined' && typeof(instance.onBlockSelect) === 'function') {
      instance.onBlockSelect(evt);
    }
  },

  _onBlockDeselect: function(evt) {
    var instance = this.instances.filter(function(instance) {
      return instance.id === evt.detail.sectionId;
    })[0];

    if (typeof(instance) !== 'undefined' && typeof(instance.onBlockDeselect) === 'function') {
      instance.onBlockDeselect(evt);
    }
  },
  register: function(type, constructor) {
    this.constructors[type] = constructor;

    $('[data-section-type=' + type + ']').each(function(idx, container) {
      this._createInstance(container, constructor);
    }.bind(this));
  }
});

// Javascript image helpers
concrete.Images = (function() {

  function preload(images, size) {
    if (typeof images === 'string') {
      images = [images];
    }
    for (var i = 0; i <= images.length-1; i++) {
      this.imageLoad(this.getImageUrl(images[i], size));
    }
  }

  function imageLoad(url) {
    new Image().src = url;
  }

  function getImageUrl(src, size) {
    if (size === null) {
      return src;
    }

    if (size === 'master') {
      return concrete.Images.removeProtocol(src);
    }

    var match = src.match(/\.(jpg|jpeg|gif|png|tiff|tif|bmp|bitmap)(\?v=\d+)$/i);

    if (match !== null) {
      var prefix = src.split(match[0]);
      var suffix = match[0];

      return concrete.Images.removeProtocol(prefix[0] + "_" + size + suffix);
    }

    return null;

  }

  function imageSize(src) {
    var match = src.match(/.+_((?:pico|icon|thumb|small|compact|medium|large|grande)|\d{1,4}x\d{0,4}|x\d{1,4})[_\.@]/);

    if (match !== null) {
      return match[1];
    } else {
      return null;
    }
  }

  function switchImage(element, image, callback) {
    var oldSize = imageSize(element.src)
    var newSize = imageSize(image.src);
    var newImage = image.src;

    // If the iamge already has the size parameter remove it
    if (newSize !== null) {
      newImage = newImage.replace('_'+newSize, '')
    }

    var imageUrl = getImageUrl(newImage, oldSize);

    if (typeof callback === 'function') {
      callback(imageUrl, size, element);
    } else {
      element.src = imageUrl;
    }
  }

  function removeProtocol(url) {
    return url.replace(/http(s)?:/, '');
  }

  return {
    preload: preload,
    getImageUrl: getImageUrl,
    imageSize: imageSize,
    imageLoad: imageLoad,
    switchImage: switchImage,
    removeProtocol: removeProtocol,
  };

})();

concrete.Collection = (function() {

  function Collection(container) {
    var $container = this.$container = $(container);
    this.selectors = {
      sortBy: '[data-sort]',
      viewBy: '[data-view]'
    }

    $container.on('change', this.selectors.sortBy, this._onSortByChange.bind(this));
    $container.on('click', this.selectors.viewBy, this._onViewByChange.bind(this));
  }

  Collection.prototype = _.assignIn({}, Collection.prototype, {

    _getSortBy: function() {
      return $(this.selectors.sortBy+' option:selected').val();
    },

    _onSortByChange: function() {

      var sortBy = this._getSortBy();
      this.$container.trigger({
        type: 'sortByChange',
        sortBy: sortBy
      });

      concrete.urlParams.sort_by = this.currentSortBy = sortBy;
      location.search = jQuery.param(concrete.urlParams);
    },

    _onViewByChange: function(evt) {
      evt.preventDefault();
      var viewBy = evt.target.getAttribute('data-view');

      this.$container.trigger({
        type: 'viewByChange',
        sortBy: viewBy
      });

      concrete.urlParams.view = this.currentViewBy = viewBy;
      location.search = jQuery.param(concrete.urlParams);
    },

    onUnload: function() {
      this.$container.off();
    }

  });
  return Collection;
  // intialize self
})();

concrete.Variants = (function() {

  function Variants(options) {
    this.$container = options.$container;
    this.product = options.product;
    this.singleOptionSelector = options.singleOptionSelector;
    this.originalSelectorId = options.originalSelectorId;
    this.enableHistoryState = options.enableHistoryState;
    this.currentVariant = this._getVariantFromOptions();

    $(this.singleOptionSelector, this.$container).on('change', this._onSelectChange.bind(this));
  }

  Variants.prototype = _.assign({}, Variants.prototype, {

    _getCurrentOptions: function() {
      var currentOptions = _.map(jQuery(this.singleOptionSelector, this.$container), function(el) {
        var $element = $(el);
        var type = $element.attr('type');
        var currentOption = {};
        if (type === 'radio' || type === 'checkbox') {
          if ($element[0].checked) {
            currentOption.value = $element.val();
            currentOption.index = $element.attr('data-index');

            return currentOption;
          } else {
            return false;
          }
        } else {
          currentOption.value = $element.val();
          currentOption.index = $element.data('index');
          return currentOption;
        }
      });

      currentOptions = _.compact(currentOptions);
      return currentOptions;
    },

    _getVariantFromOptions: function() {
      var selectedValues = this._getCurrentOptions();
      var variants = this.product.variants;
      var found = variants.filter(function(variant) {
        return selectedValues.every(function(values) {
          return _.isEqual(variant[values.index], values.value);
        });
      });
      return found[0];
    },

    _onSelectChange: function() {
      var variant = this._getVariantFromOptions();
      this.$container.trigger({
        type: 'variantChange',
        variant: variant
      });

      if (!variant) {
        return;
      }

      this._updateMasterSelect(variant);
      this._updateImages(variant);
      this._updatePrice(variant);
      this._updateSKU(variant);
      this.currentVariant = variant;

      if (this.enableHistoryState) {
        this._updateHistoryState(variant);
      }
    },

    _updateImages: function(variant) {
      var variantImage = variant.featured_image || {};
      var currentVariantImage = this.currentVariant.featured_image || {};

      if (!variant.featured_image || variantImage.src === currentVariantImage.src) {
        return;
      }

      this.$container.trigger({
        type: 'variantImageChange',
        variant: variant
      });
    },

    _updatePrice: function(variant) {
      if (variant.price === this.currentVariant.price && variant.compare_at_price === this.currentVariant.compare_at_price) {
        return;
      }

      this.$container.trigger({
        type: 'variantPriceChange',
        variant: variant
      });
    },

    _updateSKU: function(variant) {
      if (variant.sku === this.currentVariant.sku) {
        return;
      }

      this.$container.trigger({
        type: 'variantSKUChange',
        variant: variant
      });
    },

    _updateHistoryState: function(variant) {
      if (!history.replaceState || !variant) {
        return;
      }

      // Push the variant attribute to the browser history and url
      concrete.pushNewUrl(concrete.replaceUrlParam(window.location.href, 'variant', variant.id))
    },

    _updateMasterSelect: function(variant) {
      $(this.originalSelectorId, this.$container).val(variant.id);
    }
  });

  return Variants;

})();

concrete.Product = (function() {

  function Product(container) {
    var $container = this.$container = $(container);
    //var sectionId = $container.attr('data-section-id');
    this.settings = {
      enableHistoryState: $container.data('enable-history-state') || false,
    };

    // Create our selectors
    this.selectors = {
      addToCart: '[data-add-to-cart]',
      addToCartText: '#AddToCartText',
      comparePrice: '#ComparePrice',
      originalPrice: '#ProductPrice',
      onSale: '#OnSale',
      featuredImage: '#ProductPhotoImg',
      featuredImageContainer: '#ProductPhoto',
      originalSelectorId: '#productSelect',
      singleOptionSelector: '.single-option-selector',
      variantId: '[name=id]',
    };
    // Find the product json
    if (!$('#ProductJson').html()) {
      return;
    }
    this.productSingleObject = JSON.parse(document.getElementById('ProductJson').innerHTML);
    this._stringOverrides();
    this._initVariants();
  }


  Product.prototype = _.assignIn({}, Product.prototype, {

    _stringOverrides: function() {
      concrete.productStrings = concrete.productStrings || {};
      _.extend(concrete.strings, concrete.productStrings);
    },

    _initVariants: function() {
      var options = {
        $container: this.$container,
        enableHistoryState: this.settings.enableHistoryState,
        singleOptionSelector: this.selectors.singleOptionSelector,
        product: this.productSingleObject,
      };

      this.variants = new concrete.Variants(options);
      this.$container.on('variantChange', this._updateAddToCart.bind(this));
      this.$container.on('variantChange', this._updateVariantId.bind(this));
      this.$container.on('variantChange', this._updatePrices.bind(this));
    },

    _updateAddToCart: function(evt) {
      var variant = evt.variant;
      $(this.selectors.productPrices).removeClass('hidden');

      if (variant) {
        if (variant.available) {
          $(this.selectors.addToCart).prop('disabled', false);
          $(this.selectors.addToCartText).text(concrete.strings.addToCart);
        } else {
          $(this.selectors.addToCart).prop('disabled', true);
          $(this.selectors.addToCartText).text(concrete.strings.soldOut);
        }
      } else {
        $(this.selectors.addToCart).prop('disabled', true);
        $(this.selectors.addToCartText).text(concrete.strings.unavailable);
        $(this.selectors.productPrices).addClass('hidden');
      }
    },

    _updatePrices: function(evt) {
      var variant = evt.variant;
      $(this.selectors.originalPrice).html(concrete.Currency.formatMoney(variant.price));
      if (variant.price < variant.compare_at_price) {
        $(this.selectors.onSale).removeClass('hidden')
        $(this.selectors.comparePrice).html(concrete.Currency.formatMoney(variant.compare_at_price, concrete.moneyFormat))
      } else {
        $(this.selectors.onSale).addClass('hidden');
      }
    },

    _updateVariantId: function(evt) {
      var variant = evt.variant;
      if (variant)
        $(this.selectors.variantId).val(variant.id);
    },

    onUnload: function() {
      this.$container.off();
    }

  });

  return Product;
  // intialize self
})();

/**
 *  This is an example of a new sections javascript. When you call: sections.register('empty-section', EmptySection)
 * the function EmptySection() will fire with a container set to $('[data-section-type=empty-section]')
 * This is also fired when the shopify:section:onload event fires.
 * You can edit the individual events to modify what happens in the theme editor yourself; but be aware that EmptySection() is also fired on page load on the live site.
 * Any functions unique to your section should do inside the EmptySection.prototype object and the function name should be preceeded with an _.
 * Format: _myFunction: function(arguments) { //Function code }.
 * Settings can be passed to this.settings by adding data attributes to your sections parent div and selecting them inside this.settings.
 **/
concrete.EmptySection = (function() {
  function EmptySection(container) {
    var $container = $(container);
    var sectionId = $container.data('section-id');
    this.settings = {};
    this.selectors = {};
  }

  EmptySection.prototype = _.assignIn({}, EmptySection.prototype, {
    onSectionUnload: function(evt) { },
    onSectionSelect: function(evt) { },
    onSectionDeselect: function(evt) { },
    onBlockSelect: function(evt) { },
    onBlockDeselect: function(evt) { },
  });

  return EmptySection;
})();



// Initialize on document ready
$(document).ready(function() {
  // Register sections js
  var sections = new concrete.Sections();
  sections.register('product', concrete.Product);
  sections.register('collection', concrete.Collection);
});

// No More jQuery
document.addEventListener("DOMContentLoaded", function() {
  // Not Function
  function not(selector, filter) {
    try {
      return document.querySelectorAll(selector + ":not(" + filter + ")");
    } catch (e) {
      console.log("something goes wrong");
      return null;
    }
  }

  // Has Class Function
  function hasClass(el, cls) {
    return (' ' + el.className + ' ').indexOf(' ' + cls + ' ') > -1;
  }

  // Unique Array
  Array.prototype.unique = function() {
    return this.filter(function (value, index, self) {
      return self.indexOf(value) === index;
    });
  }

  // Get AJAX
  function getAjax(url, success) {
    var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
    xhr.open('GET', url);
    xhr.onreadystatechange = function() {
        if (xhr.readyState>3 && xhr.status==200) success(xhr.responseText);
    };
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    xhr.send();
    return xhr;
  }

  // Cont
  function aContainsB (a, b) {
    return a.indexOf(b) >= 0;
  }
  function aMissingB (a, b) {
    return a.indexOf(b) == -1;
  }

  // Header Menu slider
  var headerMenu = document.querySelectorAll('.header-menu.swiper-container');
  var headerMenuOptions = {
    slidesPerView: 7,
    spaceBetween: 25,
    mousewheel: true,
    keyboard: true,
    freeMode: true
  };
  for (var i = 0; i < headerMenu.length; i++) {
    var headerMenuSwiper = new Swiper(headerMenu[i], headerMenuOptions);
  }
  var headerMenuItems = document.querySelectorAll('.main-menu .menu-item');
  for (var i = 0; i < headerMenuItems.length; i++) {
    headerMenuItems[i].addEventListener('mouseover', function(e) {
      var hoveredTarget = e.target.closest('li');
      var dataTarget = hoveredTarget.getAttribute('data-handle');
      var sliderTarget = document.querySelector('.menu-slider[data-handle="'+dataTarget+'"]');
      if (sliderTarget) {
        var otherOpenNavs = document.querySelector('.menu-slider.js-slider-open');
        if (otherOpenNavs != null) {
          otherOpenNavs.velocity({ height: 0 }, { duration: 500 });
          otherOpenNavs.classList.remove('js-slider-open');
        }
        var openMenu = { height: 295 };
        var duration = { duration: 500 };
        sliderTarget.classList.add('js-slider-open');
        sliderTarget.velocity(openMenu, duration);
      }
    });
  }
  var openedSlider = document.querySelectorAll('.menu-slider');
  for (var i = 0; i < openedSlider.length; i++) {
    openedSlider[i].addEventListener('mouseout', function(event) {
      var e = event.toElement || event.relatedTarget;
      while (e && e.parentNode && e.parentNode != window) {
        if (e.parentNode == this||  e == this) {
          if(e.preventDefault) e.preventDefault();
          return false;
        }
        e = e.parentNode;
      }
      var closeOptions = { height: 0 };
      var duration = { duration: 0 };
      this.classList.remove('js-slider-open');
      this.velocity(closeOptions, duration);
    });
  }

  // Search function
  var headerSearch = document.querySelectorAll('.js-search');
  for (var i = 0; i < headerSearch.length; i++) {
    headerSearch[i].addEventListener('click', function(e) {

      var target = e.target;
      var mbTarget = document.querySelector('.mobile-search');
      var mbTargetImg = document.querySelector('.mobile-search img');
      var dkTarget = document.querySelector('.desktop-search');
      var dkTargetImg = document.querySelector('.desktop-search img');
      var dur = { duration: 300 };
      function searchOpenCheck() {
        var form = document.querySelector('.theme-header form');
        var isOpen = form.classList.contains('js-open');
        if (isOpen === false) {
          form.classList.add('js-open');
          form.velocity({ height: '110px' }, dur);
        } else {
          form.classList.remove('js-open');
          form.velocity({ height: 0 }, dur);
        }
      }

      if (target == mbTarget || target == mbTargetImg) {
        searchOpenCheck();
      } else if (target == dkTarget || dkTargetImg) {
        searchOpenCheck();
      }
    });
  }

  // Mobile Menu
  var hamburger = document.querySelector('.js-mobile-menu');
  var mobileMenu = document.querySelector('.mobile-menu');
  hamburger.addEventListener('click', function(e) {
    var target = e.target;
    if (target.tagName === 'LABEL') {
      var isOpen = mobileMenu.classList.contains('js-open');
      var dur = { duration: 300 };
      if (isOpen === false) {
        mobileMenu.classList.add('js-open');
        mobileMenu.velocity({ width: '80%' }, dur);
      } else {
        mobileMenu.classList.remove('js-open');
        mobileMenu.velocity({ width: 0 }, dur);
      }
    }
  });

  // Hero Slider
  var findHero = document.querySelectorAll('.hero-slider');
  if (findHero.length > 0) {

    var swiperSlide = document.querySelectorAll('.hero.swiper-container .swiper-slide');
    var options = {}

    if (swiperSlide.length == 1) {
      options = {
        loop: false,
        autoplay: false
      }
    } else {
      options = {
        direction: 'horizontal',
        loop: true,

        mousewheel: true,
        keyboard: true,

        speed: 700,
        slidesPerView: 1,
        autoplay: {
          delay: 5000
        }
      }
    }
    var heroSwiper = new Swiper('.hero.swiper-container', options);
  }

  // Collection slider
  var findCollectionSlider = document.querySelectorAll('.collection-slider');
  if (findCollectionSlider.length > 0) {
    var collectionSlider = document.querySelector('.collection-slider .swiper-container');
    var numOfSlides = collectionSlider.getAttribute('data-slides');
    var options = {
      slidesPerView: numOfSlides,
      direction: 'horizontal',
      mousewheel: true,
      keyboard: true,
      freeMode: true,
      scrollbar: {
        el: '.swiper-scrollbar',
        draggable: true,
        hide: false
      },
      breakpoints: {
        425: {
          slidesPerView: 2
        },
        768: {
          slidesPerView: 3
        }
      }
    };
    var collectionSwiper = new Swiper(collectionSlider, options);
  }

  // Instagram feed
  var findIgFeed = document.querySelectorAll('.instagram-feed');
  if (findIgFeed.length > 0) {
    var igFeed = document.querySelector('.instagram-feed');
    var userId = igFeed.getAttribute('data-userid');
    var clientId = igFeed.getAttribute('data-clientid');
    var accessToken = igFeed.getAttribute('data-accesstoken');
    var limit = igFeed.getAttribute('data-photolimit');

    {% raw %}
    var igTemplate = '<div class="swiper-slide">'
                    +'<a href="{{link}}" target="_blank" id="{{id}}">'
                    +'<img src="{{image}}" />'
                    +'</a>'
                    +'</div>';
    {% endraw %}

    var instafeed = new Instafeed({
      get: 'user',
      userId: userId,
      clientId: clientId,
      accessToken: accessToken,
      resolution: 'standard_resolution',
      template: igTemplate,
      sortBy: 'most-recent',
      limit: limit,
      links: false,
      after: function() {
        var igOptions = {
          direction: 'horizontal',
          slidesPerView: 4,
          spaceBetween: 25,
          slidesPerColumn: 1,
          mousewheel: true,
          keyboard: true,
          freeMode: true,
          breakpoints: {
            425: {
              slidesPerView: 4,
              slidesPerColumn: 1,
              spaceBetween: 5
            },
            768: {
              slidesPerView: 3
            }
          }
        };
        var igSwiperContainer = document.querySelector('.instagram-feed .swiper-container');
        var igSwiper = new Swiper(igSwiperContainer, igOptions);
      }
    });
    instafeed.run();
  }

  // Collection Page Functions
  var collectionPg = document.querySelectorAll('.collection-pg');
  if (collectionPg.length > 0) {
    // Consider revising to remove error messages
    var itemsWidth = document.querySelectorAll('.items-width');
    for (var i = 0; i < itemsWidth.length; i++) {
      itemsWidth[i].addEventListener('click', function(e) {
        var target = e.target.closest('span');

        // Icon Functions
        var icon = target.children[0];
        var iElem = icon.children[0];
        var isIconDown = iElem.classList.contains('fa-chevron-down');
        var allIcons = document.querySelectorAll('.filter-cat-heading i');
        var isNavDown = target.nextElementSibling.classList.contains('js-nav-open');

        function fixIcons() {
          for (var i = 0; i < allIcons.length; i++) {
            if (allIcons[i].classList.contains('fa-chevron-up')) {
              allIcons[i].classList.remove('fa-chevron-up');
              allIcons[i].classList.add('fa-chevron-down');
            }
          }
        }
        if (isNavDown === false) {
          if (isIconDown === true) {
            fixIcons();
            iElem.classList.remove('fa-chevron-down');
            iElem.classList.add('fa-chevron-up');
          }
        } else {
          if (isIconDown === false) {
            iElem.classList.add('fa-chevron-down');
            iElem.classList.remove('fa-chevron-up');
          }
        }

        function outerHeight(el) {
          var height = el.offsetHeight;
          var style = el.currentStyle || getComputedStyle(el);

          height += parseInt(style.marginTop) + parseInt(style.marginBottom);
          return height;
        }

        // Show Menu
        var targetUl = target.nextElementSibling;
        var isUlOpen = targetUl.classList.contains('js-nav-open');
        var otherOpenNavs = document.querySelectorAll('ul.js-nav-open');
        var jsNav = document.querySelector('ul.js-nav-open');
        var jsNavHeight = outerHeight(targetUl);
        var openOptions = { height: jsNavHeight, opacity: 1, visibility: 'visible' };
        var closeOptions = { height: 'auto', opacity: 0, visibility: 'hidden' };
        var duration = { duration: 500 };
        if (isUlOpen === false) {
          targetUl.classList.add('js-nav-open');
          targetUl.velocity(openOptions, duration);
          if (otherOpenNavs.length == 1) {
            jsNav.classList.remove('js-nav-open');
            jsNav.velocity(closeOptions, duration);
          }
        } else {
          targetUl.classList.remove('js-nav-open');
          targetUl.velocity(closeOptions, duration);
        }
      });
    }
    // URL Changes
    var checkboxes = document.querySelectorAll('.checked');
    for (var i = 0; i < checkboxes.length; i++) {
      checkboxes[i].addEventListener('click', function(e) {
        var target = e.target;
        var targetData = target.value;
        var url = window.location.href;
        if (url.endsWith('/')) {
          url += targetData;
          window.location.href = url;
        } else if (url.endsWith('') && aMissingB(url, 'band-size') && aMissingB(url, 'color') && aMissingB(url, 'cup-size') && aMissingB(url, 'price')) {
          url += '/'+targetData;
          window.location.href = url;
        } else if (aContainsB(url, 'band-size') || aContainsB(url, 'color') || aContainsB(url, 'cup-size') || aContainsB(url, 'price')) {
          url += '+'+targetData;
          window.location.href = url;
        }
      });
    }

    // Set Filter State
    function currentFilterState() {
      var urlSegment = document.URL.substring(document.URL.lastIndexOf('/')+1);
      if (urlSegment) {
        var activeFilters = urlSegment.split('+');
        for (var i = 0; i < activeFilters.length; i++) {
          var checkHandleized = activeFilters[i].split('_');
          if (checkHandleized.length > 1) {
            var deHandle = checkHandleized.join('_');
            document.querySelector('.checked[value="'+deHandle+'"]').checked = true;
            document.querySelector('.reset-filter').classList.remove('hidden');
          } else {
            var firstFilter = document.querySelector('.checked[value="'+activeFilters[i]+'"]');
            if (firstFilter != null) {
              firstFilter.checked = true;
              document.querySelector('.reset-filter').classList.remove('hidden');
            }
          }
        }
      }
    }
    currentFilterState();

    // Collection Swatches
    var swatches = document.querySelectorAll('.swatches ul');
    for (var i = 0; i < swatches.length; i++) {
      swatches[i].addEventListener('click', function(e) {
        var target = e.target.closest('.color-filter');
        var targetSrc = target.dataset.image;
        var parent = target.closest('.collection-product');
        var img = parent.querySelector('.image img');
        img.src = targetSrc;
        img.setAttribute('srcset', targetSrc);

        target.closest('.swatches').querySelector('.color-filter.active').classList.remove('active');
        target.classList.add('active');
      });
    }

    // Lazy Load products
    var bLazy = new Blazy({
      container: '.collection-product',
      selector: 'img'
    });
  }

  // Gift Certificate Page
  var giftCertificate = document.querySelectorAll('.gift-certificate');
  if (giftCertificate.length > 0){
    console.log(giftCertificate);
    var addGiftToCart = document.querySelector('#giftAdd');
    addGiftToCart.addEventListener('click', function(e) {
      // Amount
      var amountTag = document.querySelector('.amount select');
      var amount = amountTag.options[amountTag.selectedIndex].value;
      // Quantity
      var qtyTag = document.querySelector('.quantity select');
      var quantity = qtyTag.options[qtyTag.selectedIndex].value;
      // Name
      var name = document.querySelector('.name').value;
      // Email
      var email = document.querySelector('.email').value;
      // Recipient Name
      var recipientName = document.querySelector('.recipient-name').value;
      // Recipient Email
      var recipientEmail = document.querySelector('.recipient-email').value;
      // Recipient Name
      var message = document.querySelector('.message').value;
      // Deliver Virtually
      var delVirtual = document.querySelector('#deliverVirtual').checked;
      // Deliver Mail
      var delMail = document.querySelector('#deliverMail').checked;
      // Check if fields are checked
      if (amount === 'Choose Amount' || quantity === 'Quantity' || name === '' || email === '' || recipientName === '' || recipientEmail === '' || message === '') {
        alert('Some fields are missing!');
        e.stopPropagation();
      } else {
        // Check if Delivery method is checked
        if (delVirtual === true && delMail === true) {
          alert('Cannot have both delivery methods checked');
          e.stopPropagation();
        } else if (delVirtual === false && delMail === false) {
          alert('Please pick a delivery method');
          e.stopPropagation();
        } else {
          var lineItems = {
            "Name": name,
            "Email": email,
            "Recipient's Name": recipientName,
            "Recipient's Email": recipientEmail,
            "Message": message,
            "Deliver virtually?": delVirtual,
            "Deliver by mail?": delMail
          };
          var errChk = {
            "success": function(data, textStatus, jqXHR) {
              console.log('Added!');
            },
            "error": function(jqXHR, textStatus, errorThrown) {
              alert('Error: '+errorThrown+'!');
            }
          };
          CartJS.addItem(amount, quantity, lineItems, errChk);
        }
      }
    });
  }

  // Schedule a Fitting Page
  var schedFittingPg = document.querySelectorAll('.schedule-a-fitting');
  if (schedFittingPg.length > 0) {
    console.log(schedFittingPg);
    // Triggers/Buttons
    var telTrigger = document.querySelector('.btn[data-trigger="tel"]');
    var inStoreTrigger = document.querySelector('.btn[data-trigger="in-store"]');
    var skypeBtn = document.querySelector('.btn-skype');
    var closeBtn = document.querySelector('.btn-close');
    var prevBtn = document.querySelector('.btn-prev');
    var telDiv = document.querySelector('.telephone');
    var inStoreDiv = document.querySelector('.in-store');
    var lead = document.querySelector('.schedule-a-fitting .lead');

    // Velocity Options
    var open = { height: '200px' };
    var inStoreOpen = { height: '1400px' };
    var close = { height: 0 };
    var noOpacity = { opacity: 0 };
    var opacity = { opacity: 1 };
    var noVisible = { visibility: 'hidden' };
    var visible = { visibility: 'visible' };
    var duration = { duration: 700 };

    telTrigger.addEventListener('click', function() {
      inStoreTrigger.velocity(noOpacity, noVisible, duration);
      skypeBtn.velocity(noOpacity, noVisible, duration);
      telDiv.velocity(open, duration);
    });

    closeBtn.addEventListener('click', function() {
      inStoreTrigger.velocity(opacity, visible, duration);
      skypeBtn.velocity(opacity, visible, duration);
      telDiv.velocity(close, duration);
    });

    inStoreTrigger.addEventListener('click', function() {
      this.closest('.btn-container').classList.add('mb-js-hide');
      telTrigger.velocity(noOpacity, noVisible, duration);
      skypeBtn.velocity(noOpacity, noVisible, duration);
      inStoreDiv.velocity(inStoreOpen, duration);
      lead.innerHTML = 'You are one step closer to finding your perfect fit. In order to schedule your fitting we just need a little more information.';

    });

    prevBtn.addEventListener('click', function() {
      this.closest('.container').querySelector('.btn-container').classList.remove('mb-js-hide');
      telTrigger.velocity(opacity, visible, duration);
      skypeBtn.velocity(opacity, visible, duration);
      inStoreDiv.velocity(close, duration);
      lead.innerHTML = 'Schedule a complimentary one on one fitting today. We are available via telephone, in person, and Skype.'
    });

    var formSuccessClose = document.querySelectorAll('.success-btn-close');
    if (formSuccessClose.length > 0) {
      for (var i = 0; i < formSuccessClose.length; i++) {
        formSuccessClose[i].addEventListener('click', function() {
          var parent = this.closest('.in-store');
          parent.velocity({ opacity: 0, visibility: 'hidden' }, { duration: 500 });
        });
      }
    }
  }

  // Contact Us
  var contactPg = document.querySelectorAll('.contact-us-page');
  if (contactPg.length > 0) {
    console.log(contactPg);
    var phoneBtn = document.querySelector('.call');
    var phonePopup = document.querySelector('.phone-popup');
    var closeBtn = document.querySelector('.btn-close');
    var emailBtn = document.querySelector('.email');
    var emailForm = document.querySelector('.email-form');
    var dropdown = { height: '700px' };
    var slideUp = { height: 0 };
    var showOpts = { visibility: 'visible', opacity: 1 };
    var hideOpts = { opacity: 0, visibility: 'hidden' };
    var duration = { duration: 700 };

    phoneBtn.addEventListener('click', function() {
      phonePopup.velocity(showOpts, duration);
    });

    closeBtn.addEventListener('click', function() {
      phonePopup.velocity(hideOpts, duration);
    });

    emailBtn.addEventListener('click', function() {
      var isOpen = emailForm.classList.contains('js-open');
      if (isOpen === true) {
        emailForm.classList.remove('js-open');
        emailForm.velocity(slideUp, duration);
      } else {
        emailForm.classList.add('js-open');
        emailForm.velocity(dropdown, duration);
      }
    });

    var formSuccessClose = document.querySelectorAll('.success-btn-close');
    if (formSuccessClose.length > 0) {
      for (var i = 0; i < formSuccessClose.length; i++) {
        formSuccessClose[i].addEventListener('click', function() {
          var parent = this.closest('.form-success-popup');
          parent.velocity({ opacity: 0, visibility: 'hidden' }, { duration: 500 });
        });
      }
    }
  }

  // Customer Service
  var customerServicePg = document.querySelectorAll('.customer-service');
  if (customerServicePg.length > 0) {
    console.log(customerServicePg);
    // Desktop Functions
    var tabItem = document.querySelectorAll('.tab-item');
    for (var i = 0; i < tabItem.length; i++) {
      tabItem[i].addEventListener('click', function(e) {
        var target = e.target.closest('li');
        var tabItemIndex = Array.prototype.slice.call(target.parentNode.children).indexOf(target);
        var activeTabItem = document.querySelector('.tab-item.active');
        var activeTabPanel = document.querySelector('.tab-panel.active');
        var findRightPanel = document.querySelectorAll('.tab-panel')[tabItemIndex];

        activeTabItem.classList.remove('active');
        target.classList.add('active');
        activeTabPanel.classList.remove('active');
        findRightPanel.classList.add('active');
      });
    }
    var question = document.querySelectorAll('.dk-accordion');
    for (var i = 0; i < question.length; i++) {
      question[i].addEventListener('click', function(e) {
        var target = e.target.closest('.question');
        var iEl = target.firstChild;
        var pane = target.nextElementSibling;
        var isActive = pane.classList.contains('active');
        var paneHeight = pane.clientHeight;
        var duration = { duration: 500 };
        var openOptions = {
          height: paneHeight,
          visibility: 'visible',
          opacity: 1
        };
        var addMargin = {
          marginBottom: paneHeight
        };
        var closeOptions = {
          height: 'auto',
          visibility: 'hidden',
          opacity: 0
        };
        var removeMargin = {
          marginBottom: 20
        };
        if (iEl.classList.contains('plus')) {
          iEl.classList.remove('plus');
          iEl.classList.add('minus');
          iEl.innerHTML = '-';
        } else {
          iEl.classList.add('plus');
          iEl.classList.remove('minus');
          iEl.innerHTML = '+';
        }
        if (isActive === false) {
          pane.classList.add('active');
          target.velocity(addMargin, duration);
          pane.velocity(openOptions, duration);
        } else {
          pane.classList.remove('active');
          target.velocity(removeMargin, duration);
          pane.velocity(closeOptions, duration);
        }
      });
    }

    // Mobile Functions
    var mbAccordion = document.querySelectorAll('.mb-accordion');
    for (var i = 0; i < mbAccordion.length; i++) {
      mbAccordion[i].addEventListener('click', function(e) {
        var target = e.target.closest('.block');
        var icon = target.firstChild;
        var isPlus = icon.classList.contains('plus');

        if (isPlus === true) {
          icon.classList.remove('plus');
          icon.classList.add('minus');
          icon.innerHTML = '-'
        } else {
          icon.classList.add('plus');
          icon.classList.remove('minus');
          icon.innerHTML = '+'
        }

        var mbPane = target.nextElementSibling;
        var isMbPaneActive = mbPane.classList.contains('active');
        var paneHeight = mbPane.clientHeight;
        var duration = { duration: 500 };
        var openOptions = {
          height: paneHeight,
          visibility: 'visible',
          opacity: 1
        };
        var addMargin = {
          marginBottom: paneHeight
        };
        var closeOptions = {
          height: 'auto',
          visibility: 'hidden',
          opacity: 0
        };
        var removeMargin = {
          marginBottom: 0
        };
        if (isMbPaneActive === false) {
          mbPane.classList.add('active');
          target.velocity(addMargin, duration);
          mbPane.velocity(openOptions, duration);
        } else {
          mbPane.classList.remove('active');
          target.velocity(removeMargin, duration);
          mbPane.velocity(closeOptions, duration);
        }
      });
    }
  }

  // Privacy Page
  var privacyPg = document.querySelectorAll('.privacy-page');
  if (privacyPg.length > 0) {
    var tabItems = document.querySelectorAll('.tab-item');
    var tabPanels = document.querySelectorAll('.tab-panel');
    for (var i = 0; i < tabItems.length; i++) {
      tabItems[i].addEventListener('click', function(e) {
        var target = e.target.closest('li');
        var targetData = target.getAttribute('data-tabitem');
        var activeTabItem = document.querySelector('.tab-item.active');
        var activeTabPanel = document.querySelector('.tab-panel.active');
        var findRightPanel = document.querySelector('.tab-panel[data-tabpanel="'+targetData+'"]');

        activeTabItem.classList.remove('active');
        target.classList.add('active');
        activeTabPanel.classList.remove('active');
        findRightPanel.classList.add('active');

        var block = findRightPanel.querySelector('.accordion .block');
        var pane = findRightPanel.querySelector('.accordion .pane');
        var otherOpenPane = document.querySelector('.pane.js-open');
        var paneHeight = pane.clientHeight;
        var iEl = block.firstChild;
        var duration = { duration: 500 };
        var openOptions = {
          height: paneHeight,
          visibility: 'visible',
          opacity: 1
        };
        var addMargin = {
          marginBottom: paneHeight
        };
        var closeOptions = {
          height: 'auto',
          visibility: 'hidden',
          opacity: 0
        };
        var removeMargin = {
          marginBottom: 0
        };

        if (iEl.classList.contains('plus') === true) {
          iEl.classList.remove('plus');
          iEl.classList.add('minus');
          iEl.innerHTML = '-';
        } else {
          iEl.classList.add('plus');
          iEl.classList.remove('minus');
          iEl.innerHTML = '+';
        }

        if (pane.classList.contains('js-open') === false) {
          pane.classList.add('js-open');
          pane.velocity(openOptions, duration);
          block.velocity(addMargin, duration);
        } else {
          pane.classList.remove('js-open');
          pane.velocity(closeOptions, duration);
          block.velocity(removeMargin, duration);
        }
      });
    }
    for (var i = 0; i < tabPanels.length; i++) {
      tabPanels[i].addEventListener('click', function(e) {
        var target = e.target.closest('.accordion');
        var targetData = target.parentNode.getAttribute('data-tabpanel');
        var activeTabItem = document.querySelector('.tab-item.active');
        var activeTabPanel = document.querySelector('.tab-panel.active');
        var findRightTabItem = document.querySelector('.tab-item[data-tabitem="'+ targetData +'"]');

        activeTabItem.classList.remove('active');
        activeTabPanel.classList.remove('active');
        target.parentNode.classList.add('active');
        findRightTabItem.classList.add('active');

        var block = target.querySelector('.block');
        var pane = target.querySelector('.pane');
        var paneHeight = pane.clientHeight;
        var iEl = block.firstChild;
        var duration = { duration: 500 };
        var openOptions = {
          height: paneHeight,
          visibility: 'visible',
          opacity: 1
        };
        var addMargin = {
          marginBottom: paneHeight
        };
        var closeOptions = {
          height: 'auto',
          visibility: 'hidden',
          opacity: 0
        };
        var removeMargin = {
          marginBottom: 0
        };

        if (iEl.classList.contains('plus') === true) {
          iEl.classList.remove('plus');
          iEl.classList.add('minus');
          iEl.innerHTML = '-';
        } else {
          iEl.classList.add('plus');
          iEl.classList.remove('minus');
          iEl.innerHTML = '+';
        }

        if (pane.classList.contains('js-open') === false) {
          pane.classList.add('js-open');
          pane.velocity(openOptions, duration);
          block.velocity(addMargin, duration);
        } else {
          pane.classList.remove('js-open');
          pane.velocity(closeOptions, duration);
          block.velocity(removeMargin, duration);
        }
      });
    }
  }

  // Fit Guide Page
  var fitGuidePg = document.querySelectorAll('.fit-guide-page');
  if (fitGuidePg.length > 0) {
    var getNav = document.querySelector('.tab-item.active').getAttribute('data-active-nav');
    document.getElementById('js-nav').innerHTML = getNav;

    var tabItem = document.querySelectorAll('.tab-item');
    for (var i = 0; i < tabItem.length; i++) {

      tabItem[i].addEventListener('click', function(e) {
        var target = e.target.closest('li');
        var targetData = target.getAttribute('data-active-nav');
        var tabItemIndex = Array.prototype.slice.call(target.parentNode.children).indexOf(target);
        var activeTabItem = document.querySelector('.tab-item.active');
        var activeTabPanel = document.querySelector('.tab-panel.active');
        var findRightPanel = document.querySelectorAll('.tab-panel')[tabItemIndex];

        activeTabItem.classList.remove('active');
        target.classList.add('active');
        activeTabPanel.classList.remove('active');
        findRightPanel.classList.add('active');

        document.getElementById('js-nav').innerHTML = targetData;
      });
    }

    var accordion = document.querySelectorAll('.accordion');
    for (var i = 0; i < accordion.length; i++) {
      accordion[i].addEventListener('click', function(e) {
        var target = e.target.closest('.block');
        var iElem = target.firstChild;
        var pane = target.nextElementSibling;
        var paneHeight = pane.clientHeight;
        var duration = { duration: 500 };
        var openOptions = {
          height: paneHeight,
          visibility: 'visible',
          opacity: 1
        };
        var addMargin = {
          marginBottom: paneHeight
        };
        var closeOptions = {
          height: 'auto',
          visibility: 'hidden',
          opacity: 0
        };
        var removeMargin = {
          marginBottom: 0
        };
        if (iElem.classList.contains('plus')) {
          iElem.classList.remove('plus');
          iElem.classList.add('minus');
          iElem.innerHTML = '-'
        } else {
          iElem.classList.add('plus');
          iElem.classList.remove('minus');
          iElem.innerHTML = '+'
        }
        var isActive = pane.classList.contains('active');
        if (isActive === false) {
          pane.classList.add('active');
          target.velocity(addMargin, duration);
          pane.velocity(openOptions, duration);
        } else {
          pane.classList.remove('active');
          target.velocity(removeMargin, duration);
          pane.velocity(closeOptions, duration);
        }
      });
    }

    var topGalleryDiv = document.querySelector('.gallery-top');
    var thumbGalleryDiv = document.querySelector('.gallery-thumbs');
    var topOptions = {
      spaceBetween: 10,
      keyboard: true,
      loop: true,
      loopedSlides: 5,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      pagination: {
        el: '.swiper-pagination',
        type: 'fraction',
        renderFraction: function(currentClass, totalClass) {
          return 'Image <span class="' + currentClass + '"></span>' +
            ' of ' +
            '<span class="' + totalClass + '"></span>';
        }
      },
    };
    var thumbOptions = {
      spaceBetween: 10,
      slidesPerView: 4,
      touchRatio: 1,
      loop: true,
      loopedSlides: 5,
      slideToClickedSlide: true,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      breakpoints: {
        425: {
          slidesPerView: 2
        },
        768: {
          slidesPerView: 3
        }
      }
    };

    var galleryTop = new Swiper(topGalleryDiv, topOptions);
    var galleryThumbs = new Swiper(thumbGalleryDiv, thumbOptions);
    galleryTop.controller.control = galleryThumbs;
    galleryThumbs.controller.control = galleryTop;

    var mobileSelect = document.querySelector('.mobile-navigation select');
    mobileSelect.addEventListener('change', function() {
      var selectVal = mobileSelect.value;
      var activePanel = document.querySelector('.tab-panel.active');
      var findRightPanel = document.querySelector('.tab-panel[data-mobile-target="'+selectVal+'"]');

      activePanel.classList.remove('active');
      findRightPanel.classList.add('active');
    });

  }

  // Product Page desktop
  var desktopProductPg = document.querySelectorAll('.product-row.desktop');
  if (desktopProductPg.length > 0) {
    // Build Accordion
    var getH5 = document.querySelectorAll('.product-description h5');
    var jsDescriptionGrab = document.querySelector('.js-description-grab');
    for (var i = 0; i < getH5.length; i++) {
      var insideH5 = getH5[i].innerHTML;
      var getSibling = getH5[i].nextElementSibling.innerHTML;
      var accordion = document.createElement('div');
      var block = document.createElement('div');
      var pane = document.createElement('div');
      jsDescriptionGrab.appendChild(accordion)
      accordion.appendChild(block);
      accordion.appendChild(pane);
      accordion.classList.add('accordion');
      block.classList.add('block');
      pane.classList.add('pane');
      block.innerHTML = insideH5+'<span>+</span>';
      pane.innerHTML = getSibling;

      getH5[i].innerHTML = ''
      getH5[i].nextElementSibling.innerHTML = ''
    }
    var initAccordion = document.querySelectorAll('.accordion');
    for (var i = 0; i < initAccordion.length; i++) {
      initAccordion[i].addEventListener('click', function(e) {
        var target = e.target.closest('.block');
        var pane = target.nextElementSibling;
        var paneHeight = pane.clientHeight;
        var isOpen = pane.classList.contains('js-open');
        var duration = { duration: 500 };
        var openOptions = {
          height: paneHeight,
          visibility: 'visible',
          opacity: 1
        };
        var addMargin = {
          marginBottom: paneHeight
        };
        var closeOptions = {
          height: 'auto',
          visibility: 'hidden',
          opacity: 0
        };
        var removeMargin = {
          marginBottom: 0
        };

        if (isOpen === false) {
          pane.classList.add('js-open');
          target.velocity(addMargin, duration);
          pane.velocity(openOptions, duration);
        } else {
          pane.classList.remove('js-open');
          target.velocity(removeMargin, duration);
          pane.velocity(closeOptions, duration);
        }
     });
    }

    // QTY adjust
    var adjustBtn = document.querySelectorAll('.qty-wrapper .adjust');
    for (var i = 0; i < adjustBtn.length; i++) {
      adjustBtn[i].addEventListener('click', function() {
        var dataChange = parseInt(this.dataset.change);
        var qtyInput = document.querySelector('.qty-wrapper .quantity');
        var qtyVal = parseInt(qtyInput.value);
        var newVal = Math.abs(dataChange + qtyVal);
        if (qtyVal === 1) {
          if (dataChange === 1) {
            qtyInput.value = newVal;
          }
        } else {
          qtyInput.value = newVal;
        }
      });
    }

    // Add To Cart
    var addMainProduct = document.querySelector('#main-product-add');
    addMainProduct.addEventListener('click', function() {
      var variantId = document.querySelector('.option-wrapper .select-wrapper select').value;
      var inputQty = document.querySelector('.qty-wrapper .quantity').value;
      CartJS.addItem(variantId, inputQty);
    });

    // CTL Swatches
    var ctlSwatches = document.querySelectorAll('.color-wrapper .swatches .color-filter');
    var ctlSwatchLabel = document.querySelector('.color-wrapper .color-label span');
    for (var i = 0; i < ctlSwatches.length; i++) {
      ctlSwatches[i].addEventListener('click', function() {
        // Move Active Classes
        var dataColor = this.dataset.color;
        var findActiveSwatch = document.querySelector('.color-wrapper .swatches .color-filter.active');
        ctlSwatchLabel.innerHTML = dataColor;
        findActiveSwatch.classList.remove('active');
        this.classList.add('active');

        // Change info on Swatch Click
        var dataHandle = this.dataset.handle;
        var targetImg = this.closest('.first-half').querySelector('.image-container img');
        var firstOptionEdit = this.closest('.second-half').querySelector('.complete-look-option-1 .option-values-wrapper');
        var isSecondOption = this.closest('.second-half').querySelectorAll('.complete-look-option-2');
        var titleEdit = this.closest('.second-half').querySelector('.title');
        var submitBtn = this.closest('.second-half').querySelector('.ctl-submit');
        submitBtn.setAttribute('data-handle', dataHandle);
        if (isSecondOption.length > 0) {
          var secondOptionEdit = this.closest('.second-half').querySelector('.complete-look-option-2 .option-values-wrapper');
        }
        getAjax('{{shop.url}}/products/'+dataHandle, function(data) {
          var div = document.createElement('div');
          div.innerHTML = data;
          var getPhoto = div.querySelector('#ProductPhoto img');
          var photoSrc = getPhoto.src;
          targetImg.setAttribute('srcset', photoSrc);
          targetImg.src = photoSrc;
          // JSON grab
          var findJSON = div.querySelector('#ProductJson');
          var productVariants = JSON.parse(findJSON.innerHTML).variants;
          var productTitle = JSON.parse(findJSON.innerHTML).title;
          var productId = JSON.parse(findJSON.innerHTML).id;
          titleEdit.innerHTML = productTitle;
          submitBtn.setAttribute('data-product-id', productId);
          var numberSize = [];
          var letterSize =[];
          for (var i = 0; i < productVariants.length; i++) {
            //Adds to the associated array
            numberSize.push(productVariants[i].option1);
            letterSize.push(productVariants[i].option2);
          }
          var newNumSize = numberSize.unique();
          var newLetterSize = letterSize.unique();
          // First Option
          firstOptionEdit.innerHTML = ''
          for (var i = 0; i < newNumSize.length; i++) {
            var items = document.createElement('div');
            firstOptionEdit.appendChild(items);
            items.classList.add('option-selects');
            items.setAttribute('value', newNumSize[i]);
            items.innerHTML = newNumSize[i];
            firstOptionEdit.firstChild.classList.add('active');
          }
          // Add Event Listener after wipe
          var firstOption = document.querySelectorAll('.complete-look-option-1 .option-selects');
          for (var i = 0; i < firstOption.length; i++) {
            firstOption[i].addEventListener('click', function() {
              findActiveOption = this.closest('.option-values-wrapper').querySelector('.option-selects.active');
              findActiveOption.classList.remove('active');
              this.classList.add('active');

              var optVal = this.getAttribute('value');
              var setVal = this.closest('.second-half').querySelector('.ctl-submit').setAttribute('data-option1', optVal);
            });
          }
          // Second Option
          if (isSecondOption.length > 0) {
            secondOptionEdit.innerHTML = '';
            for (var i = 0; i < newLetterSize.length; i++) {
              var items = document.createElement('div');
              secondOptionEdit.appendChild(items);
              items.classList.add('option-selects');
              items.setAttribute('value', newLetterSize[i]);
              items.innerHTML = newLetterSize[i];
              secondOptionEdit.firstChild.classList.add('active');
            }
            // Add Event Listener after wipe
            var secondOption = document.querySelectorAll('.complete-look-option-2 .option-selects');
            for (var i = 0; i < secondOption.length; i++) {
              secondOption[i].addEventListener('click', function() {
                findActiveOption = this.closest('.option-values-wrapper').querySelector('.option-selects.active');
                findActiveOption.classList.remove('active');
                this.classList.add('active');

                var optVal = this.getAttribute('value');
                var setVal = this.closest('.second-half').querySelector('.ctl-submit').setAttribute('data-option2', optVal);
              });
            }
          }
        });
      });
    }

    // CTL Size Selector
    var firstOption = document.querySelectorAll('.complete-look-option-1 .option-selects');
    for (var i = 0; i < firstOption.length; i++) {
      firstOption[i].addEventListener('click', function() {
        findActiveOption = this.closest('.option-values-wrapper').querySelector('.option-selects.active');
        findActiveOption.classList.remove('active');
        this.classList.add('active');

        var optVal = this.getAttribute('value');
        var setVal = this.closest('.second-half').querySelector('.ctl-submit').setAttribute('data-option1', optVal);
      });
    }
    var isSecondOption = document.querySelectorAll('.complete-look-option-2');
    if (isSecondOption.length > 0) {
      var secondOption = document.querySelectorAll('.complete-look-option-2 .option-selects');
      for (var i = 0; i < secondOption.length; i++) {
        secondOption[i].addEventListener('click', function() {
          findActiveOption = this.closest('.option-values-wrapper').querySelector('.option-selects.active');
          findActiveOption.classList.remove('active');
          this.classList.add('active');

          var optVal = this.getAttribute('value');
          var setVal = this.closest('.second-half').querySelector('.ctl-submit').setAttribute('data-option2', optVal);
        });
      }
    }

    // CTL Add To Cart
    ctlSubmit = document.querySelectorAll('.ctl-submit');
    for (var i = 0; i < ctlSubmit.length; i++) {
      ctlSubmit[i].addEventListener('click', function(e) {
        e.preventDefault();
        var dataHandle = this.dataset.handle;
        var productId = this.getAttribute('data-product-id');
        if (this.getAttribute('data-option1') != null) {
          var option1 = this.getAttribute('data-option1');
        } else {
          alert('Please click on your first desired size');
          return false;
        }
        var isOption2 = this.closest('.second-half').querySelectorAll('.complete-look-option-2');
        if (isOption2.length > 0) {
          if (this.getAttribute('data-option2') != null) {
            var option2 = this.getAttribute('data-option2');
          } else {
            alert('Please click on your second desired size');
            return false;
          }
        }
        var qty = this.closest('.quantity-and-button').querySelector('.quantity').value;
        var selectedVariant = {
          0:null,
          1:null,
          2:null
        };
        if(option1 != ''){
          selectedVariant[0] = option1;
        }
        if(option2 != ''){
          selectedVariant[1] = option2;
        }

        getAjax('{{shop.url}}/products/'+dataHandle, function(data) {
          var div = document.createElement('div');
          div.innerHTML = data;
          var getJSON = div.querySelector('#ProductJson');
          var json = JSON.parse(getJSON.innerHTML);
          var getVariants = json.variants;
          for (var i = 0; i < getVariants.length; i++) {
            var testOption1 = getVariants[i].option1;
            var testOption2 = getVariants[i].option2;
            var testOption3 = getVariants[i].option3;

            if(selectedVariant[0] == testOption1 && selectedVariant[1] == testOption2 && selectedVariant[2] == testOption3){
              found = true;
              selectedVariant = getVariants[i];
              break;
            }
          }
          CartJS.addItem(selectedVariant.id, qty);
        });
      });
    }
  }

  // Product Page mobile
  var mobileProductPg = document.querySelectorAll('.product-row.mobile');
  if (mobileProductPg.length > 0) {
    // Mobile Slider
    var prodMbSwiper = new Swiper('.mb-images.swiper-container', {
      pagination: {
        el: '.swiper-pagination',
      },
    });

    // Mobile accordion
    var getH5 = document.querySelectorAll('.mb-product-description h5');
    var jsDescriptionGrab = document.querySelector('.js-mb-description-grab');
    for (var i = 0; i < getH5.length; i++) {
      var insideH5 = getH5[i].innerHTML;
      var getSibling = getH5[i].nextElementSibling.innerHTML;
      var accordion = document.createElement('div');
      var block = document.createElement('div');
      var pane = document.createElement('div');
      jsDescriptionGrab.appendChild(accordion)
      accordion.appendChild(block);
      accordion.appendChild(pane);
      accordion.classList.add('accordion');
      block.classList.add('block');
      pane.classList.add('pane');
      block.innerHTML = insideH5+'<span>+</span>';
      pane.innerHTML = getSibling;

      getH5[i].innerHTML = ''
      getH5[i].nextElementSibling.innerHTML = ''
    }
    var initAccordion = document.querySelectorAll('.accordion');
    for (var i = 0; i < initAccordion.length; i++) {
      initAccordion[i].addEventListener('click', function(e) {
        var target = e.target.closest('.block');
        var pane = target.nextElementSibling;
        var paneHeight = pane.clientHeight;
        var isOpen = pane.classList.contains('js-open');
        var duration = { duration: 500 };
        var openOptions = {
          height: paneHeight,
          visibility: 'visible',
          opacity: 1
        };
        var addMargin = {
          marginBottom: paneHeight
        };
        var closeOptions = {
          height: 'auto',
          visibility: 'hidden',
          opacity: 0
        };
        var removeMargin = {
          marginBottom: 0
        };

        if (isOpen === false) {
          pane.classList.add('js-open');
          target.velocity(addMargin, duration);
          pane.velocity(openOptions, duration);
        } else {
          pane.classList.remove('js-open');
          target.velocity(removeMargin, duration);
          pane.velocity(closeOptions, duration);
        }
     });
    }

    // QTY adjust
    var mbAdjustBtn = document.querySelectorAll('.product-row.mobile .qty-wrapper .adjust');
    for (var i = 0; i < mbAdjustBtn.length; i++) {
      mbAdjustBtn[i].addEventListener('click', function() {
        var dataChange = parseInt(this.dataset.change);
        var qtyInput = this.closest('.qty-wrapper').querySelector('.quantity');
        var qtyVal = parseInt(qtyInput.value);
        var newVal = Math.abs(dataChange + qtyVal);
        if (qtyVal === 1) {
          if (dataChange === 1) {
            qtyInput.value = newVal;
          }
        } else {
          qtyInput.value = newVal;
        }
      });
    }

    // Add To Cart
    var addMainProduct = document.querySelector('#mb-main-product-add');
    addMainProduct.addEventListener('click', function() {
      var variantId = this.closest('.product-options').querySelector('.option-wrapper .select-wrapper select').value;
      var inputQty = this.closest('.product-options').querySelector('.qty-wrapper .quantity').value;
      CartJS.addItem(variantId, inputQty);
    });
  }
});
